return {
  {
    "nvim-treesitter/nvim-treesitter",
    build = ":TSUpdate",
    event = "VeryLazy",
    lazy = vim.fn.argc(-1) == 0, -- Load treesitter early when opening a file from the cmdline
    init = function(plugin)
      -- PERF: add nvim-treesitter queries to the rtp and its custom query predicates early.
      -- This is needed because a bunch of plugins no longer `require("nvim-treesitter")`, which
      -- no longer trigger the **nvim-treesitter** module to be loaded in time.
      -- Luckily, the only things that those plugins need are the custom queries, which we make
      -- available during startup.
      require("lazy.core.loader").add_to_rtp(plugin)
      require("nvim-treesitter.query_predicates")
    end,
    cmd = { "TSUpdateSync", "TSUpdate", "TSInstall" },
    keys = {
      { "<C-space>", desc = "Increment Selection" },
      { "<BS>", desc = "Decrement Selection", mode = "x" },
    },
    opts_extend = { "ensure_installed" },
    ---@type TSConfig
    ---@diagnostic disable-next-line: missing-fields
    opts = {
      highlight = { enable = true },
      indent = { enable = true },
      ensure_installed = {
        "asm",
        "awk",
        "bash",
        "bibtex",
        "c_sharp",
        "c",
        "cairo",
        "clojure",
        "cmake",
        "commonlisp",
        "cpp",
        "css",
        "csv",
        "cuda",
        "cue",
        "d",
        "dart",
        "desktop",
        "devicetree",
        "diff",
        "disassembly",
        "dockerfile",
        "dot",
        "ebnf",
        "editorconfig",
        "elixir",
        "erlang",
        "fish",
        "fsh",
        "fsharp",
        "func",
        "git_config",
        "git_rebase",
        "gitattributes",
        "gitcommit",
        "gitignore",
        "glsl",
        "gnuplot",
        "go",
        "goctl",
        "gomod",
        "gosum",
        "gotmpl",
        "gowork",
        "gpg",
        "groovy",
        "haskell",
        "hcl",
        "hlsl",
        "html",
        "http",
        "java",
        "javadoc",
        "javascript",
        "jinja_inline",
        "jinja",
        "jq",
        "jsdoc",
        "json",
        "json5",
        "jsonnet",
        "julia",
        "kcl",
        "kconfig",
        "kdl",
        "kotlin",
        "latex",
        "linkerscript",
        "llvm",
        "lua",
        "luadoc",
        "luap",
        "make",
        "markdown_inline",
        "markdown",
        "matlab",
        "meson",
        "nasm",
        "nginx",
        "objc",
        "objdump",
        "ocaml_interface",
        "ocaml",
        "ocamllex",
        "pascal",
        "passwd",
        "pem",
        "perl",
        "php",
        "powershell",
        "printf",
        "prolog",
        "promql",
        "properties",
        "proto",
        "prql",
        "puppet",
        "pymanifest",
        "python",
        "ql",
        "r",
        "readline",
        "regex",
        "rego",
        "requirements",
        "robots",
        "ruby",
        "rust",
        "scala",
        "scss",
        "solidity",
        "sql",
        "ssh_config",
        "strace",
        "tcl",
        "terraform",
        "tmux",
        "toml",
        "tsv",
        "tsx",
        "twig",
        "typescript",
        "typespec",
        "udev",
        "verilog",
        "vhdl",
        "vim",
        "vimdoc",
        "xml",
        "xresources",
        "yaml",
      },
      matchup = {
        enable = true, -- Enable Treesitter integration
        include_match_words = true, -- Optional: match `if...then`, etc.
      },
      incremental_selection = {
        enable = true,
        keymaps = {
          init_selection = "<C-space>",
          node_incremental = "<C-space>",
          scope_incremental = false,
          node_decremental = "<BS>",
        },
      },
      textobjects = {
        move = {
          enable = true,
          goto_next_start = {
            ["]f"] = "@function.outer",
            ["]c"] = "@class.outer",
            ["]a"] = "@parameter.inner",
          },
          goto_next_end = {
            ["]F"] = "@function.outer",
            ["]C"] = "@class.outer",
            ["]A"] = "@parameter.inner",
          },
          goto_previous_start = {
            ["[f"] = "@function.outer",
            ["[c"] = "@class.outer",
            ["[a"] = "@parameter.inner",
          },
          goto_previous_end = {
            ["[F"] = "@function.outer",
            ["[C"] = "@class.outer",
            ["[A"] = "@parameter.inner",
          },
        },
      },
    },
    ---@param opts TSConfig
    config = function(_, opts)
      require("nvim-treesitter.configs").setup(opts)
    end,
  },
}
